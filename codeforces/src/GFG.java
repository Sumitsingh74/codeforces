import java.util.*;
class linkedlis<T> {
    Node head;Node tail;
    class Node {
    T data;
    Node next;
    Node prev;
    Node(T data) {
        this.data = data;
        next = null;
        prev=null;
       }
   }
    void insert(T data){
        Node ne=new Node(data);
        if(head==null){
            head=ne;
            tail=ne;
        }else {
            ne.prev=tail;tail.next=ne;tail=tail.next;
        }
    }
    void insert_atfront(T data){
        Node ne=new Node(data);
        if(head==null){
            head=ne;
            tail=ne;
        }else {
            head.prev=ne;ne.next=head;head=ne;
        }
    }

    void insert_atposision(T data, int pos){
        Node ne=new Node(data);
        if(head==null){
            head=ne;
            tail=ne;
        } else if (pos==1) {
            head.prev=ne;
            ne.next=head;
            head=ne;
        } else {
            Node temp=head;int cou=0;
            while (temp.next!=null&&cou<pos-2){
                cou++;temp=temp.next;
            }
            ne.next=temp.next;temp.next.prev=ne;ne.prev=temp;temp.next=ne;
        }
    }
    void printlist(Node head){
        Node temp=head;
        while (temp!=null){
            System.out.print(temp.data+" ");temp=temp.next;
        }
        System.out.println();
    }
    void printreverse(Node tail){
        Node temp=this.tail;
        while (temp!=null){
            System.out.print(temp.data+" ");temp=temp.prev;
        }
        System.out.println();
    }
    void pop_first(Node head){
        if(head!=null){
            Node temp=head;temp=temp.next;temp.prev=null;
            this.head=temp;
        }
    }
    void pop_last(Node head){
        if(head!=null){
            Node temp=tail;temp=temp.prev;temp.next=null;
            this.tail=temp;
        }
    }
    void middl1(){
        Node slow=head;Node fast=head;
        while (fast!=null&&(fast.next)!=null){
            slow=slow.next;fast=fast.next.next;
        }
//        printlist(slow);
        System.out.println(slow.data);
    }
    void insertafter_data(T data,T chek){
        int pos=1;
        Node temp=head;
        while (temp.data!=chek&&temp.next!=null){
            temp=temp.next;pos++;
        }
        if(temp.next!=null){
            insert_atposision(data,pos+1);
        }

    }

}
class GFG {

    public static void main(String args[])
    {
        Scanner s=new Scanner(System.in);
        linkedlis<Integer> list=new linkedlis();
        list.insert(1);
        list.insert(4);list.insert(7);list.insert(4);list.insert(2);list.insert(3);list.insert(1);
        list.insert_atfront(77);
        list.insert_atposision(88,4);
        list.printlist(list.head);
        list.insertafter_data(99,77);
        list.printlist(list.head);
//        list.printreverse(list.tail);
//        list.pop_first(list.head);
//        list.pop_last(list.head);
//        list.printlist(list.head);
//        list.insert_atposision(77,2);
//        list.printlist(list.head);
//        list.insert_atposision(97,4);
//        list.printlist(list.head);
//         list.middl1();





    }
}


/////////////////////////////////////////////////////

class Huffman {

    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    public static void printCode(HuffmanNode root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left == null && root.right == null && Character.isLetter(root.c)) {
            // c is the character in the node
            System.out.println(root.c + ":" + s);
            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    // main function
    public static void main(String[] args)
    {

        Scanner s = new Scanner(System.in);

        // number of characters.
        int n = 6;
        char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' };
        int[] charfreq = { 5, 9, 12, 13, 16, 45 };

        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator());

        for (int i = 0; i < n; i++) {

            // creating a Huffman node object
            // and add it to the priority queue.
            HuffmanNode hn = new HuffmanNode();

            hn.c = charArray[i];
            hn.data = charfreq[i];

            hn.left = null;
            hn.right = null;

            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }

        // create a root node
        HuffmanNode root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {

            // first min extract.
            HuffmanNode x = q.peek();
            q.poll();

            // second min extract.
            HuffmanNode y = q.peek();
            q.poll();

            // new node f which is equal
            HuffmanNode f = new HuffmanNode();

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';

            // first extracted node as left child.
            f.left = x;

            // second extracted node as the right child.
            f.right = y;

            // marking the f node as the root node.
            root = f;

            // add this node to the priority-queue.
            q.add(f);
        }

        // print the codes by traversing the tree
        printCode(root, "");
    }
}

// node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode {

    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

// comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {

        return x.data - y.data;
    }
}

// This code is contributed by Kunwar Desh Deepak Singh





//    static int ffs(long x) {
//        if (x==0) return 0;
//        int num = 1;
//        if ((x & 0xffffffffL) == 0) {
//            num += 32;
//            x >>= 32;
//        }
//        if ((x & 0xffff) == 0) {
//            num += 16;
//            x >>= 16;
//        }
//        if ((x & 0xff) == 0) {
//            num += 8;
//            x >>= 8;
//        }
//        if ((x & 0xf) == 0) {
//            num += 4;
//            x >>= 4;
//        }
//        if ((x & 0x3) == 0) {
//            num += 2;
//            x >>= 2;
//        }
//        if ((x & 0x1) == 0){
//            num += 1;
//        }
//        return num;
//    }
//
//    static class BitSet implements Serializable, Cloneable {
//        private long[] data;
//        private long tailAvailable;
//        private int totalBit;
//        private int m;
//        private static final int SHIFT = 6;
//        private static final int LOW = 63;
//        private static final int BITS_FOR_EACH = 64;
//        private static final long ALL_ONE = ~0L;
//        private static final long ALL_ZERO = 0L;
//        private static final int MAX_OFFSET = 63;
//
//        public BitSet(int n) {
//            totalBit = n;
//            this.m = (totalBit + 64 - 1) / 64;
//            data = new long[m];
//            tailAvailable = oneBetween(0, offset(totalBit - 1));
//        }
//
//        public int findFirst() {
//            for (int i = 0; i<m; i++) {
//                if (data[i] != 0L) {
//                    return i * 64 + ffs(data[i])-1;
//                }
//            }
//            return -1;
//        }
//
//        public BitSet(BitSet bs) {
//            this.data = bs.data.clone();
//            this.tailAvailable = bs.tailAvailable;
//            this.totalBit = bs.totalBit;
//            this.m = bs.m;
//        }
//
//        public BitSet(BitSet bs, int l, int r) {
//            totalBit = r - l + 1;
//            tailAvailable = oneBetween(0, offset(totalBit - 1));
//            data = Arrays.copyOfRange(bs.data, word(l), word(r) + 1);
//            this.m = data.length;
//            leftShift(offset(l));
//            this.m = (totalBit + 64 - 1) / 64;
//            data[m - 1] &= tailAvailable;
//            for (int i = m; i < data.length; i++) {
//                data[i] = 0;
//            }
//        }
//
//        public boolean get(int i) {
//            return (data[word(i)] & (1L << offset(i))) != 0;
//        }
//
//        public void set(int i) {
//            data[word(i)] |= (1L << offset(i));
//        }
//
//        public void flip(int i) {
//            data[word(i)] ^= (1L << offset(i));
//        }
//
//        private static int word(int i) {
//            return i >>> SHIFT;
//        }
//
//        private static int offset(int i) {
//            return i & LOW;
//        }
//
//        private long oneBetween(int l, int r) {
//            if (r < l) {
//                return 0;
//            }
//            long lBegin = 1L << offset(l);
//            long rEnd = 1L << offset(r);
//            return (ALL_ONE ^ (lBegin - 1)) & ((rEnd << 1) - 1);
//        }
//
//        public int capacity() {
//            return totalBit;
//        }
//
//        public void copy(BitSet bs) {
//            int n = Math.min(this.m, bs.m);
//            System.arraycopy(bs.data, 0, data, 0, n);
//            Arrays.fill(data, n, n, 0);
//        }
//
//        public void or(BitSet bs) {
//            int n = Math.min(this.m, bs.m);
//            for (int i = 0; i < n; i++) {
//                data[i] |= bs.data[i];
//            }
//        }
//
//        public void leftAndOr(int a) {
//            int u = a / 64, v = a % 64;
//        }
//
//        public int nextSetBit(int start) {
//            int offset = offset(start);
//            int w = word(start);
//            if (offset != 0) {
//                long mask = oneBetween(offset, 63);
//                if ((data[w] & mask) != 0) {
//                    return Long.numberOfTrailingZeros(data[w] & mask) + w * BITS_FOR_EACH;
//                }
//                w++;
//            }
//
//            while (w < m && data[w] == ALL_ZERO) {
//                w++;
//            }
//            if (w >= m) {
//                return capacity();
//            }
//            return Long.numberOfTrailingZeros(data[w]) + w * BITS_FOR_EACH;
//        }
//
//        public void leftShift(int n) {
//            int wordMove = word(n);
//            int offsetMove = offset(n);
//            int rshift = 63 - (offsetMove - 1);
//
//            if (offsetMove != 0) {
//                for (int i = 0; i < m; i++) {
//                    if (i > 0) {
//                        data[i - 1] |= data[i] << rshift;
//                    }
//                    data[i] >>>= offsetMove;
//                }
//            }
//            if (wordMove > 0) {
//                for (int i = 0; i < m; i++) {
//                    if (i >= wordMove) {
//                        data[i - wordMove] = data[i];
//                    }
//                    data[i] = 0;
//                }
//            }
//        }
//
//        public void rightShift(int n) {
//            int wordMove = word(n);
//            int offsetMove = offset(n);
//            int lShift = MAX_OFFSET + 1 - offsetMove;
//
//            if (offsetMove != 0) {
//                for (int i = m - 1; i >= 0; i--) {
//                    if (i + 1 < m) {
//                        data[i + 1] |= data[i] >>> lShift;
//                    }
//                    data[i] <<= offsetMove;
//                }
//            }
//            if (wordMove > 0) {
//                for (int i = m - 1; i >= 0; i--) {
//                    if (i + wordMove < m) {
//                        data[i + wordMove] = data[i];
//                    }
//                    data[i] = 0;
//                }
//            }
//
//            data[m - 1] &= tailAvailable;
//        }
//
//        public BitSet clone() {
//            return new BitSet(this);
//        }
//
//        public String toString() {
//            StringBuilder builder = new StringBuilder("{");
//            for (long datum : data) {
//                builder.append(Long.toBinaryString(datum)).append(", ").append(datum).append(" ");
//            }
//            builder.append("}");
//            return builder.toString();
//        }
//    }
